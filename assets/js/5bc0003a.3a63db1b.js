"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[635],{10384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"Figure 1. High-level architecture of the Sketch2Screen application.","source":"@site/docs/requirements/system-block-diagram.md","sourceDirName":"requirements","slug":"/requirements/system-block-diagram","permalink":"/project-001-sketch2screen/docs/requirements/system-block-diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/requirements/system-block-diagram.md","tags":[],"version":"current","lastUpdatedBy":"nickrehac","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Sketch2Screen","permalink":"/project-001-sketch2screen/docs/requirements/system-overview"},"next":{"title":"General Requirements","permalink":"/project-001-sketch2screen/docs/requirements/general-requirements"}}');var s=n(74848),a=n(28453);const o={sidebar_position:2},i="System Block Diagram",c={},l=[{value:"Description",id:"description",level:2}];function d(e){const t={h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"system-block-diagram",children:"System Block Diagram"})}),"\n",(0,s.jsx)(t.mermaid,{value:"flowchart LR\n    Users[Users/Collaborators]\n\n    subgraph Frontend[React Frontend]\n        Canvas[Drawing Canvas]\n        Design[Design Interface]\n    end\n\n    subgraph Backend[Django Backend]\n        API[REST API Server]\n        WS[WebSocket Server]\n    end\n    \n    AI[AI Model API<br/>Anthropic Claude]\n    DB[(Database<br/>SQLite)]\n\n    Users --\x3e|Draw & Collaborate| Frontend\n    Frontend --\x3e|HTTP Requests| API\n    Frontend <--\x3e|Real-time Sync| WS\n    API --\x3e|Generate Components| AI\n    AI --\x3e|Component Designs| API\n    API <--\x3e|Store/Retrieve| DB\n    WS <--\x3e|Workspace State| DB\n    API --\x3e|Generated Code| Frontend\n    Frontend --\x3e|Download Code| Users\n\n    classDef userStyle fill:#4fc3f7,stroke:#0277bd,stroke-width:2px\n    classDef frontendStyle fill:#ffb74d,stroke:#e65100,stroke-width:2px\n    classDef backendStyle fill:#ba68c8,stroke:#6a1b9a,stroke-width:2px\n    classDef externalStyle fill:#e57373,stroke:#b71c1c,stroke-width:2px\n    classDef storageStyle fill:#81c784,stroke:#2e7d32,stroke-width:2px\n\n    class Users userStyle\n    class Canvas,Design frontendStyle\n    class API,WS backendStyle\n    class AI externalStyle\n    class DB storageStyle"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Figure 1."})," High-level architecture of the Sketch2Screen application."]}),"\n",(0,s.jsx)(t.h2,{id:"description",children:"Description"}),"\n",(0,s.jsx)(t.p,{children:"Sketch2Screen is built with a client-server architecture that enables real-time collaboration and AI-powered design generation. The frontend, built with React, is where users interact with the application through a drawing canvas and design interface. Users can sketch UI components, arrange layouts, and export code directly from their browser."}),"\n",(0,s.jsx)(t.p,{children:"The backend consists of a Django server with two main components: a REST API server that handles requests for AI generation, component selection, and code export, and a WebSocket server that manages real-time collaboration features. When a user draws on the canvas, those changes are instantly synchronized across all collaborators through WebSocket connections. The system integrates with Anthropic's Claude API to analyze sketch images and generate HTML/CSS component designs."}),"\n",(0,s.jsx)(t.p,{children:"All workspace data, including sketches, generated components, and design layouts, are persisted in a SQLite database, allowing users to save their work and return to it later via a shareable workspace link. The final output is production-ready code in various frameworks (HTML/CSS, React, Vue, etc.) that users can download and integrate directly into their projects."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var r=n(96540);const s={},a=r.createContext(s);function o(e){const t=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);