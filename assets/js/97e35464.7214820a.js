"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[4666],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var a=s(96540);const t={},i=a.createContext(t);function c(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),a.createElement(i.Provider,{value:n},e.children)}},46971:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"api-specification/backend-api/websocket-api","title":"WebSocket API","description":"Real-time collaboration protocol for synchronizing sketches across multiple connected clients.","source":"@site/docs/api-specification/backend-api/websocket-api.md","sourceDirName":"api-specification/backend-api","slug":"/api-specification/backend-api/websocket-api","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/websocket-api","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/api-specification/backend-api/websocket-api.md","tags":[],"version":"current","lastUpdatedBy":"Seunghun Lee","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Internal Services","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/services"},"next":{"title":"Frontend API","permalink":"/project-001-sketch2screen/docs/category/frontend-api"}}');var t=s(74848),i=s(28453);const c={},l="WebSocket API",r={},o=[{value:"Overview",id:"overview",level:2},{value:"Connection",id:"connection",level:2},{value:"Endpoint",id:"endpoint",level:3},{value:"Connection Example",id:"connection-example",level:3},{value:"Connection Lifecycle",id:"connection-lifecycle",level:3},{value:"Message Format",id:"message-format",level:2},{value:"Client \u2192 Server Messages",id:"client--server-messages",level:3},{value:"Scene Update",id:"scene-update",level:4},{value:"Page Update",id:"page-update",level:4},{value:"Server \u2192 Client Messages",id:"server--client-messages",level:3},{value:"Scene Update",id:"scene-update-1",level:4},{value:"Page Update",id:"page-update-1",level:4},{value:"Collaboration Sessions",id:"collaboration-sessions",level:2},{value:"Session Management",id:"session-management",level:3},{value:"Session State",id:"session-state",level:3},{value:"User Identification",id:"user-identification",level:3},{value:"Complete Integration Example",id:"complete-integration-example",level:2},{value:"CollabClient Class",id:"collabclient-class",level:3},{value:"Using CollabClient in React",id:"using-collabclient-in-react",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Avoid Echo",id:"avoid-echo",level:3},{value:"Debounce Scene Updates",id:"debounce-scene-updates",level:3},{value:"Serialize Data Properly",id:"serialize-data-properly",level:3},{value:"Handle Connection Failures",id:"handle-connection-failures",level:3},{value:"Server Implementation Details",id:"server-implementation-details",level:2},{value:"Scene Update Flow",id:"scene-update-flow",level:3},{value:"Page Update Flow",id:"page-update-flow",level:3},{value:"Limitations",id:"limitations",level:2},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"websocket-api",children:"WebSocket API"})}),"\n",(0,t.jsx)(n.p,{children:"Real-time collaboration protocol for synchronizing sketches across multiple connected clients."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The WebSocket API enables real-time collaboration by allowing multiple users to work on the same sketch simultaneously. Changes are broadcast to all connected clients in the same collaboration session."}),"\n",(0,t.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,t.jsx)(n.h3,{id:"endpoint",children:"Endpoint"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ws://localhost:8000/ws/collab/{collabID}/\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Path Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"collabID"})," (string/number) - Unique identifier for the collaboration session"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"connection-example",children:"Connection Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const collabID = \"12345\"; // Can be numeric or string\nconst ws = new WebSocket(\n  `ws://${window.location.hostname}:${window.location.port}/ws/collab/${collabID}/`\n);\n\nws.onopen = () => {\n  console.log('Connected to collaboration session:', collabID);\n};\n\nws.onmessage = (event) => {\n  const message = JSON.parse(event.data);\n  console.log('Received message:', message);\n};\n\nws.onerror = (error) => {\n  console.error('WebSocket error:', error);\n};\n\nws.onclose = () => {\n  console.log('Disconnected from collaboration session');\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"connection-lifecycle",children:"Connection Lifecycle"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client connects"})," \u2192 Server calls ",(0,t.jsx)(n.code,{children:"onNewConnection(userID, collabID)"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Server sends existing sketches"})," \u2192 Client receives all current pages via ",(0,t.jsx)(n.code,{children:"page_update"})," and ",(0,t.jsx)(n.code,{children:"scene_update"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client sends updates"})," \u2192 Server broadcasts to other members"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client disconnects"})," \u2192 Server calls ",(0,t.jsx)(n.code,{children:"onConnectionEnd(userID, collabID)"})," and cleans up if last member"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"message-format",children:"Message Format"}),"\n",(0,t.jsxs)(n.p,{children:["All messages are JSON objects with an ",(0,t.jsx)(n.code,{children:"action"})," field indicating the message type."]}),"\n",(0,t.jsx)(n.h3,{id:"client--server-messages",children:"Client \u2192 Server Messages"}),"\n",(0,t.jsx)(n.p,{children:"Messages sent from the client to the server."}),"\n",(0,t.jsx)(n.h4,{id:"scene-update",children:"Scene Update"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Notify server of changes to drawing elements on a sketch page."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "action": "scene_update",\n  "sketchID": "page-1",\n  "sketchData": {\n    "elements": [...],\n    "appState": {...}\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action"})," (string) - Must be ",(0,t.jsx)(n.code,{children:'"scene_update"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchID"})," (string/number) - ID of the sketch page being updated"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchData"})," (object) - Excalidraw scene data containing elements and app state"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'ws.send(JSON.stringify({\n  action: "scene_update",\n  sketchID: "page-1",\n  sketchData: {\n    elements: [\n      { type: "rectangle", x: 10, y: 20, width: 100, height: 50 }\n    ],\n    appState: { viewBackgroundColor: "#ffffff" }\n  }\n}));\n'})}),"\n",(0,t.jsx)(n.h4,{id:"page-update",children:"Page Update"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Notify server of page creation, rename, or deletion operations."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "action": "page_update",\n  "sketchID": "page-2",\n  "pageName": "About Us"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action"})," (string) - Must be ",(0,t.jsx)(n.code,{children:'"page_update"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchID"})," (string/number) - ID of the sketch page"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pageName"})," (string | null) - New name for the page, or ",(0,t.jsx)(n.code,{children:"null"})," to delete"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Create/Rename Page:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Create new page or rename existing\nws.send(JSON.stringify({\n  action: "page_update",\n  sketchID: "page-2",\n  pageName: "Contact Page"\n}));\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Delete Page:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Delete page by sending null name\nws.send(JSON.stringify({\n  action: "page_update",\n  sketchID: "page-2",\n  pageName: null\n}));\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"server--client-messages",children:"Server \u2192 Client Messages"}),"\n",(0,t.jsx)(n.p,{children:"Messages received from the server (broadcast to other clients)."}),"\n",(0,t.jsx)(n.h4,{id:"scene-update-1",children:"Scene Update"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Notify client that another user has updated a sketch's drawing content."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "action": "scene_update",\n  "sketchID": "page-1",\n  "sketchData": {\n    "elements": [...],\n    "appState": {...}\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action"})," (string) - Always ",(0,t.jsx)(n.code,{children:'"scene_update"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchID"})," (string/number) - ID of the updated sketch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchData"})," (object) - The updated scene data"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Handling:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'ws.onmessage = (event) => {\n  const message = JSON.parse(event.data);\n\n  if (message.action === "scene_update") {\n    updateLocalScene(message.sketchID, message.sketchData);\n  }\n};\n'})}),"\n",(0,t.jsx)(n.h4,{id:"page-update-1",children:"Page Update"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose:"})," Notify client that another user has created, renamed, or deleted a page."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Format:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "action": "page_update",\n  "sketchID": "page-3",\n  "pageName": "New Page"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Fields:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"action"})," (string) - Always ",(0,t.jsx)(n.code,{children:'"page_update"'})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sketchID"})," (string/number) - ID of the affected page"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pageName"})," (string | null) - New name, or ",(0,t.jsx)(n.code,{children:"null"})," if page was deleted"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Handling:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'ws.onmessage = (event) => {\n  const message = JSON.parse(event.data);\n\n  if (message.action === "page_update") {\n    if (message.pageName === null) {\n      // Page was deleted\n      deletePage(message.sketchID);\n    } else {\n      // Page was created or renamed\n      createOrRenamePage(message.sketchID, message.pageName);\n    }\n  }\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"collaboration-sessions",children:"Collaboration Sessions"}),"\n",(0,t.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Each ",(0,t.jsx)(n.code,{children:"collabID"})," represents a unique collaboration session"]}),"\n",(0,t.jsx)(n.li,{children:"Sessions are created automatically when the first user connects"}),"\n",(0,t.jsx)(n.li,{children:"Sessions are destroyed when the last user disconnects"}),"\n",(0,t.jsxs)(n.li,{children:["All session data is ",(0,t.jsx)(n.strong,{children:"in-memory"})," (lost on server restart)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"session-state",children:"Session State"}),"\n",(0,t.jsx)(n.p,{children:"Each session maintains:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Members list"})," - Array of connected user channel names"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Sketches list"})," - Array of sketch objects with:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ID"})," - Unique identifier"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"name"})," - Display name"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"sceneData"})," - Current drawing state"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"user-identification",children:"User Identification"}),"\n",(0,t.jsxs)(n.p,{children:["Users are identified by their ",(0,t.jsx)(n.strong,{children:"channel name"})," (assigned by Django Channels):"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Unique per WebSocket connection"}),"\n",(0,t.jsxs)(n.li,{children:["Automatically generated (e.g., ",(0,t.jsx)(n.code,{children:'"specific.channel.abcd1234"'}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Used internally by the server"}),"\n",(0,t.jsx)(n.li,{children:"Not exposed to clients"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complete-integration-example",children:"Complete Integration Example"}),"\n",(0,t.jsx)(n.h3,{id:"collabclient-class",children:"CollabClient Class"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class CollabClient {\n  constructor(collabID) {\n    this.collabID = collabID;\n    this.connection = new WebSocket(\n      `ws://${window.location.hostname}:${window.location.port}/ws/collab/${collabID}/`\n    );\n\n    this.connection.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n\n      if (message.action === "scene_update") {\n        this.handleSceneUpdate?.(message.sketchID, message.sketchData);\n      } else if (message.action === "page_update") {\n        this.handlePageUpdate?.(message.sketchID, message.pageName);\n      }\n    };\n  }\n\n  setUpdateHandler(handler) {\n    this.handleSceneUpdate = handler;\n  }\n\n  setPageUpdateHandler(handler) {\n    this.handlePageUpdate = handler;\n  }\n\n  sendSceneUpdate(sketchID, sceneData) {\n    // Remove non-serializable objects\n    const serializedData = {\n      elements: sceneData.elements,\n      appState: sceneData.appState\n    };\n\n    this.connection.send(JSON.stringify({\n      action: "scene_update",\n      sketchID: sketchID,\n      sketchData: serializedData\n    }));\n  }\n\n  sendPageUpdate(sketchID, name) {\n    this.connection.send(JSON.stringify({\n      action: "page_update",\n      sketchID: sketchID,\n      pageName: name\n    }));\n  }\n\n  disconnect() {\n    this.connection.close();\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"using-collabclient-in-react",children:"Using CollabClient in React"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function App() {\n  const [collabClient, setCollabClient] = useState(null);\n  const [pages, setPages] = useState([]);\n  const [activePageId, setActivePageId] = useState(null);\n\n  // Initialize collaboration\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const collabID = urlParams.get('collab') || Date.now();\n\n    const client = new CollabClient(collabID);\n\n    // Handle incoming scene updates\n    client.setUpdateHandler((sketchID, sceneData) => {\n      setPages(prev => prev.map(page =>\n        page.id === sketchID\n          ? { ...page, sceneData }\n          : page\n      ));\n    });\n\n    // Handle incoming page updates\n    client.setPageUpdateHandler((sketchID, pageName) => {\n      if (pageName === null) {\n        // Delete page\n        setPages(prev => prev.filter(p => p.id !== sketchID));\n      } else {\n        // Create or rename page\n        setPages(prev => {\n          const existing = prev.find(p => p.id === sketchID);\n          if (existing) {\n            // Rename\n            return prev.map(p =>\n              p.id === sketchID ? { ...p, name: pageName } : p\n            );\n          } else {\n            // Create\n            return [...prev, { id: sketchID, name: pageName, sceneData: {} }];\n          }\n        });\n      }\n    });\n\n    setCollabClient(client);\n\n    return () => client.disconnect();\n  }, []);\n\n  // Send local changes\n  const handleSceneChange = (sceneData) => {\n    // Update local state\n    setPages(prev => prev.map(page =>\n      page.id === activePageId\n        ? { ...page, sceneData }\n        : page\n    ));\n\n    // Broadcast to other clients\n    collabClient?.sendSceneUpdate(activePageId, sceneData);\n  };\n\n  const handlePageRename = (pageId, newName) => {\n    setPages(prev => prev.map(p =>\n      p.id === pageId ? { ...p, name: newName } : p\n    ));\n\n    collabClient?.sendPageUpdate(pageId, newName);\n  };\n\n  const handlePageDelete = (pageId) => {\n    setPages(prev => prev.filter(p => p.id !== pageId));\n    collabClient?.sendPageUpdate(pageId, null);\n  };\n\n  // ... rest of component\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"avoid-echo",children:"Avoid Echo"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Client receives its own updates back from the server."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Track local changes and ignore matching updates."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const suppressRemoteUpdate = useRef(false);\n\nconst handleSceneChange = (sceneData) => {\n  suppressRemoteUpdate.current = true;\n  setPages(prev => /* update */);\n  collabClient?.sendSceneUpdate(activePageId, sceneData);\n\n  setTimeout(() => {\n    suppressRemoteUpdate.current = false;\n  }, 100);\n};\n\nclient.setUpdateHandler((sketchID, sceneData) => {\n  if (suppressRemoteUpdate.current) return;\n  setPages(prev => /* update */);\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"debounce-scene-updates",children:"Debounce Scene Updates"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Sending updates on every stroke floods the network."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Debounce updates during active drawing."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const updateTimerRef = useRef(null);\n\nconst handleSceneChange = (sceneData) => {\n  // Update local state immediately\n  setLocalScene(sceneData);\n\n  // Debounce network send\n  clearTimeout(updateTimerRef.current);\n  updateTimerRef.current = setTimeout(() => {\n    collabClient?.sendSceneUpdate(activePageId, sceneData);\n  }, 500);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"serialize-data-properly",children:"Serialize Data Properly"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Problem:"})," Excalidraw scene includes non-serializable objects (Maps, Sets)."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Solution:"})," Extract only serializable fields."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"const serializeScene = (sceneData) => {\n  return {\n    elements: sceneData.elements || [],\n    appState: {\n      viewBackgroundColor: sceneData.appState?.viewBackgroundColor,\n      // ... other serializable fields\n    }\n  };\n};\n\ncollabClient.sendSceneUpdate(pageId, serializeScene(sceneData));\n"})}),"\n",(0,t.jsx)(n.h3,{id:"handle-connection-failures",children:"Handle Connection Failures"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"ws.onerror = (error) => {\n  console.error('WebSocket error:', error);\n  showNotification('Connection lost. Retrying...');\n};\n\nws.onclose = (event) => {\n  if (!event.wasClean) {\n    // Reconnect after 2 seconds\n    setTimeout(() => {\n      initializeCollaboration(collabID);\n    }, 2000);\n  }\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"server-implementation-details",children:"Server Implementation Details"}),"\n",(0,t.jsx)(n.p,{children:"For reference, here's how the server processes messages:"}),"\n",(0,t.jsx)(n.h3,{id:"scene-update-flow",children:"Scene Update Flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Client sends ",(0,t.jsx)(n.code,{children:"scene_update"})," message"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"SketchConsumer.receive()"})," parses JSON"]}),"\n",(0,t.jsxs)(n.li,{children:["Calls ",(0,t.jsx)(n.code,{children:"CollabServer.onSceneUpdate(userID, collabID, sketchID, sceneData)"})]}),"\n",(0,t.jsx)(n.li,{children:"Server updates stored sketch data"}),"\n",(0,t.jsxs)(n.li,{children:["Server broadcasts to all members ",(0,t.jsx)(n.strong,{children:"except sender"})]}),"\n",(0,t.jsxs)(n.li,{children:["Each member receives message via ",(0,t.jsx)(n.code,{children:"SketchConsumer.scene_update()"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"page-update-flow",children:"Page Update Flow"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Client sends ",(0,t.jsx)(n.code,{children:"page_update"})," message with ",(0,t.jsx)(n.code,{children:"pageName"})]}),"\n",(0,t.jsxs)(n.li,{children:["Server checks if sketch exists:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"If not found:"})," Creates new sketch with empty scene"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["If ",(0,t.jsx)(n.code,{children:"pageName"})," is ",(0,t.jsx)(n.code,{children:"null"}),":"]})," Deletes sketch"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Otherwise:"})," Updates sketch name"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Server broadcasts to all members ",(0,t.jsx)(n.strong,{children:"except sender"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No persistence"})," - All data lost on server restart"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No authentication"})," - Anyone with ",(0,t.jsx)(n.code,{children:"collabID"})," can join"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No encryption"})," - Messages sent in plain text (use ",(0,t.jsx)(n.code,{children:"wss://"})," in production)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No conflict resolution"})," - Last write wins"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"In-memory channel layer"})," - Won't scale horizontally (use Redis for production)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/rest-endpoints",children:"REST API Endpoints"})})," - HTTP API for mockup generation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/services",children:"Internal Services"})})," - CollabServer implementation details"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/frontend-api/collaboration-client",children:"Frontend CollabClient"})})," - Client implementation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);