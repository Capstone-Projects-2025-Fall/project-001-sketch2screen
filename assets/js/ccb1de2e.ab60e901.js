"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[788],{11728:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>o});const c=JSON.parse('{"id":"api-specification/frontend-api/collaboration-client","title":"CollabClient Class","description":"WebSocket client for real-time collaboration in Sketch2Screen.","source":"@site/docs/api-specification/frontend-api/collaboration-client.md","sourceDirName":"api-specification/frontend-api","slug":"/api-specification/frontend-api/collaboration-client","permalink":"/project-001-sketch2screen/docs/api-specification/frontend-api/collaboration-client","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/api-specification/frontend-api/collaboration-client.md","tags":[],"version":"current","lastUpdatedBy":"Seunghun Lee","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Frontend API","permalink":"/project-001-sketch2screen/docs/category/frontend-api"},"next":{"title":"Frontend Components","permalink":"/project-001-sketch2screen/docs/api-specification/frontend-api/components"}}');var l=s(74848),t=s(28453);const a={},i="CollabClient Class",r={},o=[{value:"Overview",id:"overview",level:2},{value:"Class Definition",id:"class-definition",level:2},{value:"Constructor",id:"constructor",level:2},{value:"<code>constructor(collabID)</code>",id:"constructorcollabid",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>collabID</code>",id:"collabid",level:3},{value:"<code>connection</code>",id:"connection",level:3},{value:"<code>sceneUpdateHandler</code>",id:"sceneupdatehandler",level:3},{value:"<code>pageUpdateHandler</code>",id:"pageupdatehandler",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>setSceneUpdateHandler(handler)</code>",id:"setsceneupdatehandlerhandler",level:3},{value:"<code>sendSceneUpdate(sketchID, sceneData)</code>",id:"sendsceneupdatesketchid-scenedata",level:3},{value:"<code>setPageUpdateHandler(handler)</code>",id:"setpageupdatehandlerhandler",level:3},{value:"<code>sendPageUpdate(sketchID, pageName)</code>",id:"sendpageupdatesketchid-pagename",level:3},{value:"<code>disconnect()</code>",id:"disconnect",level:3},{value:"Message Filtering",id:"message-filtering",level:2},{value:"Complete Integration Example",id:"complete-integration-example",level:2},{value:"React Hook for Collaboration",id:"react-hook-for-collaboration",level:3},{value:"Using the Hook",id:"using-the-hook",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Avoid Echo",id:"1-avoid-echo",level:3},{value:"2. Check Connection State",id:"2-check-connection-state",level:3},{value:"3. Handle Reconnection",id:"3-handle-reconnection",level:3},{value:"4. Serialize Data Properly",id:"4-serialize-data-properly",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Connection Fails",id:"connection-fails",level:3},{value:"Messages Not Received",id:"messages-not-received",level:3},{value:"Updates Echo Back",id:"updates-echo-back",level:3},{value:"Data Not Serializing",id:"data-not-serializing",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"collabclient-class",children:"CollabClient Class"})}),"\n",(0,l.jsx)(n.p,{children:"WebSocket client for real-time collaboration in Sketch2Screen."}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"File:"})," ",(0,l.jsx)(n.code,{children:"frontend/src/App/CollabClient.ts"})]}),"\n",(0,l.jsxs)(n.p,{children:["The ",(0,l.jsx)(n.code,{children:"CollabClient"})," class manages WebSocket connections to enable real-time collaboration between multiple users working on the same sketch. It handles sending and receiving scene updates and page operations (create, rename, delete)."]}),"\n",(0,l.jsx)(n.h2,{id:"class-definition",children:"Class Definition"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"export default class CollabClient {\n  collabID: number;\n  connection: WebSocket;\n  sceneUpdateHandler: ((sketchID: string, sceneData: SceneData) => void) | null;\n  pageUpdateHandler: ((sketchID: string, name: string | null) => void) | null;\n}\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,l.jsx)(n.h3,{id:"constructorcollabid",children:(0,l.jsx)(n.code,{children:"constructor(collabID)"})}),"\n",(0,l.jsx)(n.p,{children:"Creates a new collaboration client and establishes WebSocket connection."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"constructor(collabID: number)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"collabID"})," (number) - Unique identifier for the collaboration session"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"WebSocket URL:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:"ws://{hostname}:{port}/ws/collab/{collabID}/\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const client = new CollabClient(12345);\n// Connects to: ws://localhost:8000/ws/collab/12345/\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Connection Lifecycle Events:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'connection.onopen = () => {\n  console.log("WebSocket connected for collaboration:", collabID);\n};\n\nconnection.onerror = (error) => {\n  console.error("WebSocket error:", error);\n};\n\nconnection.onclose = () => {\n  console.log("WebSocket disconnected");\n};\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(n.h3,{id:"collabid",children:(0,l.jsx)(n.code,{children:"collabID"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"number"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Unique identifier for this collaboration session. Used to filter incoming messages and construct WebSocket URL."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const client = new CollabClient(12345);\nconsole.log(client.collabID); // 12345\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"connection",children:(0,l.jsx)(n.code,{children:"connection"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"WebSocket"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Active WebSocket connection to the collaboration server."]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"States:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebSocket.CONNECTING"})," (0) - Connection is being established"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebSocket.OPEN"})," (1) - Connection is open and ready"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebSocket.CLOSING"})," (2) - Connection is closing"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"WebSocket.CLOSED"})," (3) - Connection is closed"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'if (client.connection.readyState === WebSocket.OPEN) {\n  console.log("Connected and ready");\n}\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"sceneupdatehandler",children:(0,l.jsx)(n.code,{children:"sceneUpdateHandler"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"((sketchID: string, sceneData: SceneData) => void) | null"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Callback function invoked when a scene update is received from another collaborator."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Set via:"})," ",(0,l.jsx)(n.code,{children:"setSceneUpdateHandler()"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the sketch that was updated"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sceneData"})," (SceneData) - The updated scene data"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"pageupdatehandler",children:(0,l.jsx)(n.code,{children:"pageUpdateHandler"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Type:"})," ",(0,l.jsx)(n.code,{children:"((sketchID: string, name: string | null) => void) | null"})]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Description:"})," Callback function invoked when a page update is received from another collaborator."]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Set via:"})," ",(0,l.jsx)(n.code,{children:"setPageUpdateHandler()"})]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the sketch page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"})," (string | null) - New name, or ",(0,l.jsx)(n.code,{children:"null"})," if page was deleted"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(n.h3,{id:"setsceneupdatehandlerhandler",children:(0,l.jsx)(n.code,{children:"setSceneUpdateHandler(handler)"})}),"\n",(0,l.jsx)(n.p,{children:"Registers a callback to handle incoming scene updates from other collaborators."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"setSceneUpdateHandler(\n  handler: (sketchID: string, sceneData: SceneData) => void\n): void\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"handler"})," - Callback function with:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the updated sketch"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sceneData"})," (SceneData) - New scene data"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"client.setSceneUpdateHandler((sketchID, sceneData) => {\n  console.log(`Scene ${sketchID} was updated by a collaborator`);\n\n  // Update local state\n  setPages(prev => prev.map(page =>\n    page.id === sketchID\n      ? { ...page, scene: sceneData }\n      : page\n  ));\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Usage in React:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"useEffect(() => {\n  const client = new CollabClient(collabID);\n\n  client.setSceneUpdateHandler((sketchID, sceneData) => {\n    // Update state with remote changes\n    setPages(prev => prev.map(page =>\n      page.id === sketchID ? { ...page, scene: sceneData } : page\n    ));\n  });\n\n  return () => client.disconnect();\n}, []);\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"sendsceneupdatesketchid-scenedata",children:(0,l.jsx)(n.code,{children:"sendSceneUpdate(sketchID, sceneData)"})}),"\n",(0,l.jsx)(n.p,{children:"Sends a scene update to all other collaborators in the session."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"sendSceneUpdate(sketchID: string, sceneData: SceneData): void\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the sketch being updated"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sceneData"})," (SceneData) - The updated scene data"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Checks if WebSocket connection is open"}),"\n",(0,l.jsx)(n.li,{children:"Creates a clean, serializable copy of scene data"}),"\n",(0,l.jsxs)(n.li,{children:["Removes non-serializable properties (e.g., ",(0,l.jsx)(n.code,{children:"collaborators"})," Map)"]}),"\n",(0,l.jsx)(n.li,{children:"Sends JSON message to server"}),"\n",(0,l.jsx)(n.li,{children:"Logs warning if connection is not open"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Message Format:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "action": "scene_update",\n  "sketchID": "page-1",\n  "sketchData": {\n    "elements": [...],\n    "appState": {...},\n    "files": {...}\n  }\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const handleSceneChange = (sceneData: SceneData) => {\n  // Update local state\n  setCurrentScene(sceneData);\n\n  // Broadcast to collaborators\n  collabClient.sendSceneUpdate(activePageId, sceneData);\n};\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Data Cleaning:"})}),"\n",(0,l.jsx)(n.p,{children:"The method removes non-serializable objects before sending:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const cleanAppState = { ...sceneData.appState };\ndelete cleanAppState.collaborators; // Remove Map object\n\nconst cleanSceneData = {\n  elements: JSON.parse(JSON.stringify(sceneData.elements)),\n  appState: cleanAppState,\n  files: JSON.parse(JSON.stringify(sceneData.files))\n};\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Error Handling:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'try {\n  client.sendSceneUpdate(pageId, sceneData);\n} catch (error) {\n  console.error("Failed to send scene update:", error);\n}\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"setpageupdatehandlerhandler",children:(0,l.jsx)(n.code,{children:"setPageUpdateHandler(handler)"})}),"\n",(0,l.jsx)(n.p,{children:"Registers a callback to handle incoming page updates (create, rename, delete) from other collaborators."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"setPageUpdateHandler(\n  handler: (sketchID: string, name: string | null) => void\n): void\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"handler"})," - Callback function with:","\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the affected page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"name"})," (string | null) - New name, or ",(0,l.jsx)(n.code,{children:"null"})," if deleted"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'client.setPageUpdateHandler((sketchID, pageName) => {\n  if (pageName === null) {\n    // Page was deleted\n    console.log(`Page ${sketchID} was deleted`);\n    setPages(prev => prev.filter(p => p.id !== sketchID));\n  } else {\n    // Page was created or renamed\n    console.log(`Page ${sketchID} renamed to "${pageName}"`);\n    setPages(prev => {\n      const existing = prev.find(p => p.id === sketchID);\n      if (existing) {\n        // Rename existing page\n        return prev.map(p =>\n          p.id === sketchID ? { ...p, name: pageName } : p\n        );\n      } else {\n        // Create new page\n        return [...prev, {\n          id: sketchID,\n          name: pageName,\n          scene: makeEmptyScene()\n        }];\n      }\n    });\n  }\n});\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"sendpageupdatesketchid-pagename",children:(0,l.jsx)(n.code,{children:"sendPageUpdate(sketchID, pageName)"})}),"\n",(0,l.jsx)(n.p,{children:"Sends a page operation (create, rename, or delete) to all other collaborators."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"sendPageUpdate(sketchID: string, pageName: string | null): void\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sketchID"})," (string) - ID of the page"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"pageName"})," (string | null) - New name, or ",(0,l.jsx)(n.code,{children:"null"})," to delete"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Message Format:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-json",children:'{\n  "action": "page_update",\n  "sketchID": "page-2",\n  "pageName": "About Us"\n}\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Examples:"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Create/Rename Page:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'const createPage = () => {\n  const newPage = {\n    id: crypto.randomUUID(),\n    name: "New Page",\n    scene: makeEmptyScene()\n  };\n\n  setPages([...pages, newPage]);\n  collabClient.sendPageUpdate(newPage.id, newPage.name);\n};\n\nconst renamePage = (id: string, newName: string) => {\n  setPages(prev => prev.map(p =>\n    p.id === id ? { ...p, name: newName } : p\n  ));\n\n  collabClient.sendPageUpdate(id, newName);\n};\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Delete Page:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const deletePage = (id: string) => {\n  setPages(prev => prev.filter(p => p.id !== id));\n  collabClient.sendPageUpdate(id, null); // null = delete\n};\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"disconnect",children:(0,l.jsx)(n.code,{children:"disconnect()"})}),"\n",(0,l.jsx)(n.p,{children:"Closes the WebSocket connection."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"disconnect(): void\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"// In React cleanup\nuseEffect(() => {\n  const client = new CollabClient(collabID);\n\n  return () => {\n    client.disconnect();\n  };\n}, []);\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Note:"})," This method is not explicitly defined in the class but is accessed via:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"client.connection.close();\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"message-filtering",children:"Message Filtering"}),"\n",(0,l.jsx)(n.p,{children:"The client implements session isolation by filtering incoming messages based on collaboration ID."}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Filter Logic:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const sketchID = message.sketchID;\nconst expectedPrefix = `${this.collabID}-`;\n\nif (!sketchID || !sketchID.startsWith(expectedPrefix)) {\n  console.log(`Ignoring message for different collab session`);\n  return;\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Why This Matters:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Prevents cross-contamination between different collaboration sessions"}),"\n",(0,l.jsx)(n.li,{children:"Ensures users only see updates for their own session"}),"\n",(0,l.jsxs)(n.li,{children:["First page ID is deterministic: ",(0,l.jsx)(n.code,{children:"${collabID}-p1"})]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Example:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'// Collaboration ID: 12345\n// Valid sketch IDs: "12345-p1", "12345-p2", "12345-abc"\n// Invalid sketch IDs: "67890-p1", "p1", "page-1"\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"complete-integration-example",children:"Complete Integration Example"}),"\n",(0,l.jsx)(n.h3,{id:"react-hook-for-collaboration",children:"React Hook for Collaboration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"function useCollaboration(collabID: string) {\n  const [client, setClient] = useState<CollabClient | null>(null);\n\n  useEffect(() => {\n    const collabClient = new CollabClient(Number(collabID));\n\n    // Handle incoming scene updates\n    collabClient.setSceneUpdateHandler((sketchID, sceneData) => {\n      setPages(prev => prev.map(page =>\n        page.id === sketchID\n          ? { ...page, scene: sceneData }\n          : page\n      ));\n    });\n\n    // Handle incoming page updates\n    collabClient.setPageUpdateHandler((sketchID, pageName) => {\n      if (pageName === null) {\n        setPages(prev => prev.filter(p => p.id !== sketchID));\n      } else {\n        setPages(prev => {\n          const exists = prev.find(p => p.id === sketchID);\n          if (exists) {\n            return prev.map(p =>\n              p.id === sketchID ? { ...p, name: pageName } : p\n            );\n          } else {\n            return [...prev, {\n              id: sketchID,\n              name: pageName,\n              scene: makeEmptyScene()\n            }];\n          }\n        });\n      }\n    });\n\n    setClient(collabClient);\n\n    return () => {\n      collabClient.connection.close();\n    };\n  }, [collabID]);\n\n  return client;\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"using-the-hook",children:"Using the Hook"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"function App() {\n  const collabID = getCollabId();\n  const collabClient = useCollaboration(collabID);\n\n  const handleSceneChange = (sceneData: SceneData) => {\n    setPages(prev => prev.map(page =>\n      page.id === activePageId\n        ? { ...page, scene: sceneData }\n        : page\n    ));\n\n    collabClient?.sendSceneUpdate(activePageId, sceneData);\n  };\n\n  const handlePageRename = (id: string, name: string) => {\n    setPages(prev => prev.map(p =>\n      p.id === id ? { ...p, name } : p\n    ));\n\n    collabClient?.sendPageUpdate(id, name);\n  };\n\n  // ... rest of component\n}\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-avoid-echo",children:"1. Avoid Echo"}),"\n",(0,l.jsx)(n.p,{children:"Prevent receiving your own updates back:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const suppressRemoteUpdate = useRef(false);\n\nconst handleSceneChange = (sceneData: SceneData) => {\n  suppressRemoteUpdate.current = true;\n\n  setPages(prev => /* update */);\n  collabClient?.sendSceneUpdate(activePageId, sceneData);\n\n  setTimeout(() => {\n    suppressRemoteUpdate.current = false;\n  }, 100);\n};\n\nclient.setSceneUpdateHandler((sketchID, sceneData) => {\n  if (suppressRemoteUpdate.current) return;\n  setPages(prev => /* update */);\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-check-connection-state",children:"2. Check Connection State"}),"\n",(0,l.jsx)(n.p,{children:"Always verify WebSocket is open before sending:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:'const sendUpdate = (data: SceneData) => {\n  if (collabClient?.connection.readyState === WebSocket.OPEN) {\n    collabClient.sendSceneUpdate(activePageId, data);\n  } else {\n    console.warn("Cannot send update: WebSocket not connected");\n  }\n};\n'})}),"\n",(0,l.jsx)(n.h3,{id:"3-handle-reconnection",children:"3. Handle Reconnection"}),"\n",(0,l.jsx)(n.p,{children:"Implement reconnection logic for network failures:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const [reconnectAttempt, setReconnectAttempt] = useState(0);\n\nuseEffect(() => {\n  const client = new CollabClient(collabID);\n\n  client.connection.onclose = () => {\n    if (reconnectAttempt < 5) {\n      setTimeout(() => {\n        setReconnectAttempt(prev => prev + 1);\n      }, 2000 * Math.pow(2, reconnectAttempt)); // Exponential backoff\n    }\n  };\n\n  return () => client.connection.close();\n}, [reconnectAttempt]);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"4-serialize-data-properly",children:"4. Serialize Data Properly"}),"\n",(0,l.jsx)(n.p,{children:"Ensure all data is JSON-serializable:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-typescript",children:"const cleanScene = (scene: SceneData): SceneData => {\n  return {\n    elements: JSON.parse(JSON.stringify(scene.elements)),\n    appState: {\n      ...scene.appState,\n      collaborators: undefined // Remove Map object\n    },\n    files: JSON.parse(JSON.stringify(scene.files))\n  };\n};\n\ncollabClient.sendSceneUpdate(pageId, cleanScene(sceneData));\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"connection-fails",children:"Connection Fails"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Problem:"})," WebSocket connection doesn't establish"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Check backend server is running"}),"\n",(0,l.jsx)(n.li,{children:"Verify WebSocket endpoint is correct"}),"\n",(0,l.jsx)(n.li,{children:"Check browser console for CORS errors"}),"\n",(0,l.jsx)(n.li,{children:"Ensure firewall allows WebSocket connections"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"messages-not-received",children:"Messages Not Received"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Problem:"})," Not receiving updates from collaborators"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Verify ",(0,l.jsx)(n.code,{children:"collabID"})," matches across clients"]}),"\n",(0,l.jsxs)(n.li,{children:["Check sketch IDs have correct prefix (",(0,l.jsx)(n.code,{children:"${collabID}-..."}),")"]}),"\n",(0,l.jsx)(n.li,{children:"Ensure handlers are set before messages arrive"}),"\n",(0,l.jsx)(n.li,{children:"Check browser console for filtering logs"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"updates-echo-back",children:"Updates Echo Back"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Problem:"})," Seeing own changes duplicated"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement echo suppression (see Best Practices)"}),"\n",(0,l.jsx)(n.li,{children:"Verify server doesn't send to sender"}),"\n",(0,l.jsx)(n.li,{children:"Check for duplicate state updates"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"data-not-serializing",children:"Data Not Serializing"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Problem:"})," ",(0,l.jsx)(n.code,{children:"JSON.stringify()"})," fails or data corrupted"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Solutions:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Remove non-serializable objects (Maps, Sets, Functions)"}),"\n",(0,l.jsx)(n.li,{children:"Deep clone scene data before sending"}),"\n",(0,l.jsxs)(n.li,{children:["Use ",(0,l.jsx)(n.code,{children:"cleanSceneData"})," approach (see ",(0,l.jsx)(n.code,{children:"sendSceneUpdate"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/websocket-api",children:"WebSocket API"})})," - Backend protocol specification"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/frontend-api/components#app-component",children:"App Component"})})," - How App uses CollabClient"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/frontend-api/types-and-interfaces",children:"Types & Interfaces"})})," - SceneData and related types"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var c=s(96540);const l={},t=c.createContext(l);function a(e){const n=c.useContext(t);return c.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),c.createElement(t.Provider,{value:n},e.children)}}}]);