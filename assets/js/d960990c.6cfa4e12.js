"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8961],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>t});var r=s(96540);const i={},l=r.createContext(i);function c(e){const n=r.useContext(l);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(l.Provider,{value:n},e.children)}},76539:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"api-specification/backend-api/services","title":"Internal Services","description":"Backend service architecture and implementation details for Sketch2Screen.","source":"@site/docs/api-specification/backend-api/services.md","sourceDirName":"api-specification/backend-api","slug":"/api-specification/backend-api/services","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/services","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/api-specification/backend-api/services.md","tags":[],"version":"current","lastUpdatedBy":"Seunghun Lee","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"REST API Endpoints","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/rest-endpoints"},"next":{"title":"WebSocket API","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/websocket-api"}}');var i=s(74848),l=s(28453);const c={},t="Internal Services",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Claude Client Service",id:"claude-client-service",level:2},{value:"Functions",id:"functions",level:3},{value:"<code>image_to_html_css()</code>",id:"image_to_html_css",level:4},{value:"<code>_client()</code>",id:"_client",level:4},{value:"<code>_load_anthropic_key_from_file()</code>",id:"_load_anthropic_key_from_file",level:4},{value:"<code>_extract_text()</code>",id:"_extract_text",level:4},{value:"Collaboration Server",id:"collaboration-server",level:2},{value:"Architecture",id:"architecture",level:3},{value:"Classes",id:"classes",level:3},{value:"<code>SingletonMeta</code>",id:"singletonmeta",level:4},{value:"<code>CollabSession</code>",id:"collabsession",level:4},{value:"<code>Sketch</code>",id:"sketch",level:4},{value:"<code>CollabServer</code>",id:"collabserver",level:4},{value:"<code>onNewConnection(userID, collabID)</code>",id:"onnewconnectionuserid-collabid",level:5},{value:"<code>onSceneUpdate(userID, collabID, sketchID, sceneData)</code>",id:"onsceneupdateuserid-collabid-sketchid-scenedata",level:5},{value:"<code>onPageUpdate(userID, collabID, sketchID, pageName)</code>",id:"onpageupdateuserid-collabid-sketchid-pagename",level:5},{value:"<code>onConnectionEnd(userID, collabID)</code>",id:"onconnectionenduserid-collabid",level:5},{value:"<code>sendSceneUpdate(userID, sketchID, sceneData)</code>",id:"sendsceneupdateuserid-sketchid-scenedata",level:5},{value:"<code>sendPageUpdate(userID, sketchID, pageName)</code>",id:"sendpageupdateuserid-sketchid-pagename",level:5},{value:"WebSocket Consumer",id:"websocket-consumer",level:2},{value:"Class: <code>SketchConsumer</code>",id:"class-sketchconsumer",level:3},{value:"Methods",id:"methods",level:4},{value:"<code>connect()</code>",id:"connect",level:5},{value:"<code>disconnect(close_code)</code>",id:"disconnectclose_code",level:5},{value:"<code>receive(text_data)</code>",id:"receivetext_data",level:5},{value:"<code>scene_update(event)</code>",id:"scene_updateevent",level:5},{value:"<code>page_update(event)</code>",id:"page_updateevent",level:5},{value:"Configuration",id:"configuration",level:2},{value:"Django Settings",id:"django-settings",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Claude Client",id:"claude-client",level:3},{value:"Collaboration Server",id:"collaboration-server-1",level:3},{value:"WebSocket Consumer",id:"websocket-consumer-1",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Claude Client Errors",id:"claude-client-errors",level:3},{value:"Collaboration Server Errors",id:"collaboration-server-errors",level:3},{value:"Testing",id:"testing",level:2},{value:"Example Unit Tests",id:"example-unit-tests",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"internal-services",children:"Internal Services"})}),"\n",(0,i.jsx)(n.p,{children:"Backend service architecture and implementation details for Sketch2Screen."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The backend consists of three main service components:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Claude Client"})," - AI-powered sketch-to-code generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaboration Server"})," - Real-time session and state management"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WebSocket Consumer"})," - WebSocket message handling"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"claude-client-service",children:"Claude Client Service"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.code,{children:"backend/sketch_api/services/claudeClient.py"})]}),"\n",(0,i.jsx)(n.p,{children:"The Claude Client service handles all interactions with the Anthropic Claude API for AI-powered sketch-to-code generation."}),"\n",(0,i.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(n.h4,{id:"image_to_html_css",children:(0,i.jsx)(n.code,{children:"image_to_html_css()"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Main entry point for converting sketch images to HTML/CSS using Claude AI."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def image_to_html_css(\n    image_bytes: bytes,\n    media_type: str = "image/png",\n    prompt: Optional[str] = None\n) -> str\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_bytes"})," (bytes) - Raw binary data of the image file"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"media_type"})," (str, optional) - MIME type of the image (default: ",(0,i.jsx)(n.code,{children:'"image/png"'}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"prompt"})," (str | None, optional) - Custom user instruction for code generation (default: ",(0,i.jsx)(n.code,{children:"None"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - Generated HTML and CSS code"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RuntimeError"})," - If API key is missing or Claude returns no text"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNotFoundError"})," - If API key file path is invalid"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from sketch_api.services.claudeClient import image_to_html_css\n\n# Read image file\nwith open('sketch.png', 'rb') as f:\n    image_bytes = f.read()\n\n# Generate HTML/CSS\nhtml = image_to_html_css(\n    image_bytes=image_bytes,\n    media_type=\"image/png\",\n    prompt=\"Make this design responsive\"\n)\n\nprint(html)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How It Works:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Base64 Encoding"})," - Converts image bytes to base64 string"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prompt Construction"})," - Combines system message with user instruction"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Call"})," - Sends image + prompt to Claude via Anthropic SDK"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response Parsing"})," - Extracts text content from Claude response"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation"})," - Ensures response is not empty"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"System Prompt:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"You are a frontend assistant that converts UI sketches into high-fidelity,\nclean, production-ready HTML and CSS. Prefer semantic HTML, minimal wrappers,\ninline styles for each of the components of the image. Do not use body tag.\nUse modern CSS if possible. Use Bootstrap or Tailwind CSS only. Do not\ninclude markdown fences in the code.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Default User Instruction:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Generate HTML and CSS that recreates the layout in the image. Only provide\nthe code, no other text including markdown fences. If an element is labeled\nas an HTML tag it should be that HTML tag. If there is text in the image,\nit should be included in the HTML. Any icons or images in the sketch should\nbe represented by placeholders. All sketches generated should be width 100\npercent and height 100 percent.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Model:"})," ",(0,i.jsx)(n.code,{children:"claude-sonnet-4-20250514"})," (configurable via ",(0,i.jsx)(n.code,{children:"CLAUDE_MODEL"})," setting)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Max Tokens:"})," 2000"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Key:"})," Loaded from file or environment variable"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"_client",children:(0,i.jsx)(n.code,{children:"_client()"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Internal helper to create authenticated Anthropic client."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _client() -> Anthropic\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Anthropic"})," - Authenticated API client instance"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RuntimeError"})," - If API key is not configured"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"API Key Loading Strategy:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Try to load from file specified in ",(0,i.jsx)(n.code,{children:"CLAUDE_API_KEY"})," setting"]}),"\n",(0,i.jsxs)(n.li,{children:["If file fails, try ",(0,i.jsx)(n.code,{children:"ANTHROPIC_API_KEY"})," environment variable"]}),"\n",(0,i.jsxs)(n.li,{children:["If both fail, raise ",(0,i.jsx)(n.code,{children:"RuntimeError"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'client = _client()\nresponse = client.messages.create(\n    model="claude-sonnet-4-20250514",\n    max_tokens=1000,\n    messages=[...]\n)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"_load_anthropic_key_from_file",children:(0,i.jsx)(n.code,{children:"_load_anthropic_key_from_file()"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Internal helper to read API key from file."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _load_anthropic_key_from_file() -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - API key (whitespace trimmed)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Raises:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RuntimeError"})," - If ",(0,i.jsx)(n.code,{children:"CLAUDE_API_KEY"})," setting is not configured"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RuntimeError"})," - If API key file is empty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FileNotFoundError"})," - If file path doesn't exist"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PermissionError"})," - If file cannot be read"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Django Settings:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# settings.py\nCLAUDE_API_KEY = "/path/to/api_key.txt"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"_extract_text",children:(0,i.jsx)(n.code,{children:"_extract_text()"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Internal helper to extract text from Claude API response."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _extract_text(resp) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"resp"})," (Message) - Anthropic API response object"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"str"})," - Concatenated text from all text-type content blocks"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Response Structure:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Claude response object\n{\n    "content": [\n        {"type": "text", "text": "<div>HTML code here</div>"},\n        {"type": "text", "text": "<style>CSS here</style>"}\n    ]\n}\n\n# Extracted result\n"<div>HTML code here</div><style>CSS here</style>"\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"collaboration-server",children:"Collaboration Server"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.code,{children:"backend/sketch_api/CollabServer.py"})]}),"\n",(0,i.jsx)(n.p,{children:"The Collaboration Server manages real-time collaboration sessions using the Singleton pattern."}),"\n",(0,i.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           CollabServer (Singleton)              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  collabSessions: {                              \u2502\n\u2502    "12345": CollabSession {                     \u2502\n\u2502      members: ["user1", "user2", "user3"]       \u2502\n\u2502      sketches: [                                \u2502\n\u2502        Sketch { ID, name, sceneData }           \u2502\n\u2502      ]                                          \u2502\n\u2502    }                                            \u2502\n\u2502  }                                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,i.jsx)(n.h3,{id:"classes",children:"Classes"}),"\n",(0,i.jsx)(n.h4,{id:"singletonmeta",children:(0,i.jsx)(n.code,{children:"SingletonMeta"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Metaclass that implements the Singleton design pattern."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class MyClass(metaclass=SingletonMeta):\n    pass\n\ninstance1 = MyClass()\ninstance2 = MyClass()\n\nassert instance1 is instance2  # True - same instance\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class SingletonMeta(type):\n    _instance = None\n\n    def __call__(cls, *args, **kwargs):\n        if cls._instance == None:\n            cls._instance = super(SingletonMeta, cls).__call__(*args, **kwargs)\n        return cls._instance\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"collabsession",children:(0,i.jsx)(n.code,{children:"CollabSession"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Represents a single collaboration session."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"members"})," (list[str]) - List of connected user channel names"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sketches"})," (list[Sketch]) - List of sketch objects in this session"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'session = CollabSession()\nsession.members = ["specific.channel.abc123", "specific.channel.def456"]\nsession.sketches = [\n    Sketch("Homepage", "page-1", {...}),\n    Sketch("About", "page-2", {...})\n]\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"sketch",children:(0,i.jsx)(n.code,{children:"Sketch"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Represents a single sketch/page within a collaboration session."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constructor:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(self, name, ID, sceneData):\n    self.name = name\n    self.ID = ID\n    self.sceneData = sceneData\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"name"})," (str) - Display name of the sketch page"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ID"})," (str | int) - Unique identifier for the sketch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sceneData"})," (dict) - Excalidraw scene data (elements, appState, etc.)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'sketch = Sketch(\n    name="Contact Page",\n    ID="page-3",\n    sceneData={\n        "elements": [...],\n        "appState": {...}\n    }\n)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"collabserver",children:(0,i.jsx)(n.code,{children:"CollabServer"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Singleton server managing all collaboration sessions and message routing."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Metaclass:"})," ",(0,i.jsx)(n.code,{children:"SingletonMeta"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabSessions"})," (dict) - Maps ",(0,i.jsx)(n.code,{children:"collabID"})," \u2192 ",(0,i.jsx)(n.code,{children:"CollabSession"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,i.jsx)(n.h5,{id:"onnewconnectionuserid-collabid",children:(0,i.jsx)(n.code,{children:"onNewConnection(userID, collabID)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Handle new user connecting to a collaboration session."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Channel name of the connecting user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," (str) - Collaboration session ID"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Creates new session if it doesn't exist"}),"\n",(0,i.jsx)(n.li,{children:"Adds user to session members list"}),"\n",(0,i.jsx)(n.li,{children:"Sends all existing sketches to the new user"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'server = CollabServer()\nserver.onNewConnection("specific.channel.abc123", "12345")\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"onsceneupdateuserid-collabid-sketchid-scenedata",children:(0,i.jsx)(n.code,{children:"onSceneUpdate(userID, collabID, sketchID, sceneData)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Handle scene update from a user."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Channel name of the user sending update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," (str) - Collaboration session ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sketchID"})," (str) - ID of the sketch being updated"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sceneData"})," (dict) - New scene data"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Validates sketch exists in session (discards if not found)"}),"\n",(0,i.jsx)(n.li,{children:"Updates stored scene data"}),"\n",(0,i.jsxs)(n.li,{children:["Broadcasts update to all members ",(0,i.jsx)(n.strong,{children:"except sender"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'server.onSceneUpdate(\n    userID="specific.channel.abc123",\n    collabID="12345",\n    sketchID="page-1",\n    sceneData={"elements": [...], "appState": {...}}\n)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"onpageupdateuserid-collabid-sketchid-pagename",children:(0,i.jsx)(n.code,{children:"onPageUpdate(userID, collabID, sketchID, pageName)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Handle page create, rename, or delete operation."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Channel name of the user sending update"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," (str) - Collaboration session ID"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sketchID"})," (str) - ID of the sketch page"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pageName"})," (str | None) - New name, or ",(0,i.jsx)(n.code,{children:"None"})," to delete"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"If sketch not found:"})," Creates new sketch with empty scene data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["If ",(0,i.jsx)(n.code,{children:"pageName"})," is ",(0,i.jsx)(n.code,{children:"None"}),":"]})," Deletes sketch from session"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Otherwise:"})," Updates sketch name"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Create/rename page\nserver.onPageUpdate("user1", "12345", "page-2", "About Us")\n\n# Delete page\nserver.onPageUpdate("user1", "12345", "page-2", None)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"onconnectionenduserid-collabid",children:(0,i.jsx)(n.code,{children:"onConnectionEnd(userID, collabID)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Handle user disconnecting from session."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Channel name of the disconnecting user"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," (str) - Collaboration session ID"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Removes user from session members list"}),"\n",(0,i.jsx)(n.li,{children:"If session has no remaining members, deletes the entire session"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'server.onConnectionEnd("specific.channel.abc123", "12345")\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"sendsceneupdateuserid-sketchid-scenedata",children:(0,i.jsx)(n.code,{children:"sendSceneUpdate(userID, sketchID, sceneData)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Send scene update message to a specific user via Django Channels."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Target user channel name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sketchID"})," (str) - ID of the updated sketch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sceneData"})," (dict) - Updated scene data"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'server.sendSceneUpdate(\n    userID="specific.channel.def456",\n    sketchID="page-1",\n    sceneData={"elements": [...]}\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Internally uses:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'async_to_sync(get_channel_layer().send)(userID, {\n    "type": "scene.update",\n    "sketchID": sketchID,\n    "sketchData": sceneData\n})\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"sendpageupdateuserid-sketchid-pagename",children:(0,i.jsx)(n.code,{children:"sendPageUpdate(userID, sketchID, pageName)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Send page update message to a specific user."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"userID"})," (str) - Target user channel name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sketchID"})," (str) - ID of the updated sketch"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pageName"})," (str | None) - New name or ",(0,i.jsx)(n.code,{children:"None"})," for deletion"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'server.sendPageUpdate(\n    userID="specific.channel.def456",\n    sketchID="page-2",\n    pageName="Contact"\n)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"websocket-consumer",children:"WebSocket Consumer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Module:"})," ",(0,i.jsx)(n.code,{children:"backend/sketch_api/consumers.py"})]}),"\n",(0,i.jsx)(n.p,{children:"Handles WebSocket connections and routes messages to CollabServer."}),"\n",(0,i.jsxs)(n.h3,{id:"class-sketchconsumer",children:["Class: ",(0,i.jsx)(n.code,{children:"SketchConsumer"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Inherits:"})," ",(0,i.jsx)(n.code,{children:"channels.generic.websocket.WebsocketConsumer"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Attributes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"server"})," (CollabServer) - Singleton instance (class variable)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," (str) - Collaboration ID for this connection (instance variable)"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h5,{id:"connect",children:(0,i.jsx)(n.code,{children:"connect()"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Called when WebSocket connection is established."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Extracts ",(0,i.jsx)(n.code,{children:"collabID"})," from URL route"]}),"\n",(0,i.jsxs)(n.li,{children:["Calls ",(0,i.jsx)(n.code,{children:"server.onNewConnection()"})]}),"\n",(0,i.jsx)(n.li,{children:"Accepts the WebSocket connection"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example URL:"})," ",(0,i.jsx)(n.code,{children:"ws://localhost:8000/ws/collab/12345/"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"collabID"})," = ",(0,i.jsx)(n.code,{children:'"12345"'})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"disconnectclose_code",children:(0,i.jsx)(n.code,{children:"disconnect(close_code)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Called when WebSocket connection is closed."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"close_code"})," (int) - WebSocket close code"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Calls ",(0,i.jsx)(n.code,{children:"server.onConnectionEnd()"})," to clean up session"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"receivetext_data",children:(0,i.jsx)(n.code,{children:"receive(text_data)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Called when a message is received from the client."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text_data"})," (str) - JSON string from client"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Parses JSON message"}),"\n",(0,i.jsxs)(n.li,{children:["Checks ",(0,i.jsx)(n.code,{children:"action"})," field"]}),"\n",(0,i.jsxs)(n.li,{children:["Routes to appropriate server method:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"scene_update"'})," \u2192 ",(0,i.jsx)(n.code,{children:"onSceneUpdate()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:'"page_update"'})," \u2192 ",(0,i.jsx)(n.code,{children:"onPageUpdate()"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def receive(self, text_data):\n    message = json.loads(text_data)\n    action = message["action"]\n\n    if action == "scene_update":\n        self.server.onSceneUpdate(\n            self.channel_name,\n            self.collabID,\n            message["sketchID"],\n            message["sketchData"]\n        )\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"scene_updateevent",children:(0,i.jsx)(n.code,{children:"scene_update(event)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Called by Django Channels to send scene update to this client."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event"})," (dict) - Event data from channel layer"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Serializes event as JSON"}),"\n",(0,i.jsx)(n.li,{children:"Sends to WebSocket client"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Event:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'{\n    "type": "scene.update",\n    "sketchID": "page-1",\n    "sketchData": {...}\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sent to client as:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "action": "scene_update",\n    "sketchID": "page-1",\n    "sketchData": {...}\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h5,{id:"page_updateevent",children:(0,i.jsx)(n.code,{children:"page_update(event)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Called by Django Channels to send page update to this client."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"event"})," (dict) - Event data from channel layer"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Serializes event as JSON"}),"\n",(0,i.jsx)(n.li,{children:"Sends to WebSocket client"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Event:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'{\n    "type": "page.update",\n    "sketchID": "page-2",\n    "pageName": "About"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sent to client as:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n    "action": "page_update",\n    "sketchID": "page-2",\n    "pageName": "About"\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"django-settings",children:"Django Settings"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Required:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# settings.py\n\n# Claude API key file path or use ANTHROPIC_API_KEY env var\nCLAUDE_API_KEY = "/path/to/api_key.txt"\n\n# Optional: Claude model to use (default shown)\nCLAUDE_MODEL = "claude-sonnet-4-20250514"\n\n# Channel layers for WebSocket\nCHANNEL_LAYERS = {\n    "default": {\n        "BACKEND": "channels.layers.InMemoryChannelLayer"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Environment Variables:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Alternative to CLAUDE_API_KEY setting\nexport ANTHROPIC_API_KEY="sk-ant-..."\n\n# Set to True for production mode\nexport PROD=True\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"claude-client",children:"Claude Client"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronous API calls"})," - Blocks request thread during generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Average response time:"})," 3-10 seconds per image"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Token limit:"})," 2000 tokens per response"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rate limits:"})," Depends on Anthropic API plan"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optimization Ideas:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use async/await for non-blocking requests"}),"\n",(0,i.jsx)(n.li,{children:"Implement request queuing for high traffic"}),"\n",(0,i.jsx)(n.li,{children:"Cache common sketch patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"collaboration-server-1",children:"Collaboration Server"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-memory storage"})," - Fast but ephemeral"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No persistence"})," - All data lost on restart"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single-instance limitation"})," - InMemoryChannelLayer doesn't scale horizontally"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scaling Recommendations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use Redis channel layer for multi-server deployments"}),"\n",(0,i.jsx)(n.li,{children:"Implement database persistence for sketches"}),"\n",(0,i.jsx)(n.li,{children:"Add session expiration and cleanup"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"websocket-consumer-1",children:"WebSocket Consumer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"One consumer instance per connection"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message broadcasting"})," - O(n) where n = number of session members"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No message buffering"})," - Messages sent immediately"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"claude-client-errors",children:"Claude Client Errors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\n    html = image_to_html_css(image_bytes)\nexcept RuntimeError as e:\n    # API key missing or empty response\n    logger.error(f"Claude client error: {e}")\nexcept FileNotFoundError:\n    # API key file not found\n    logger.error("Claude API key file not found")\nexcept Exception as e:\n    # Network errors, API errors, etc.\n    logger.error(f"Unexpected error: {e}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"collaboration-server-errors",children:"Collaboration Server Errors"}),"\n",(0,i.jsx)(n.p,{children:"The CollabServer currently has minimal error handling:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Invalid sketch IDs are silently discarded"}),"\n",(0,i.jsx)(n.li,{children:"Missing sessions are created automatically"}),"\n",(0,i.jsx)(n.li,{children:"No validation of scene data structure"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Production Recommendations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add schema validation for scene data"}),"\n",(0,i.jsx)(n.li,{children:"Implement error responses to clients"}),"\n",(0,i.jsx)(n.li,{children:"Add logging for debugging"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"example-unit-tests",children:"Example Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# test_claudeClient.py\nfrom sketch_api.services.claudeClient import image_to_html_css\n\ndef test_image_to_html_css():\n    with open('test_sketch.png', 'rb') as f:\n        image_bytes = f.read()\n\n    html = image_to_html_css(image_bytes)\n\n    assert html is not None\n    assert len(html) > 0\n    assert '<' in html  # Contains HTML tags\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# test_CollabServer.py\nfrom sketch_api.CollabServer import CollabServer\n\ndef test_singleton_pattern():\n    server1 = CollabServer()\n    server2 = CollabServer()\n    assert server1 is server2\n\ndef test_session_creation():\n    server = CollabServer()\n    server.onNewConnection("user1", "test-session")\n\n    assert "test-session" in server.collabSessions\n    assert "user1" in server.collabSessions["test-session"].members\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/rest-endpoints",children:"REST API Endpoints"})})," - Views that use Claude Client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/websocket-api",children:"WebSocket API"})})," - Protocol used by Consumer"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/frontend-api/components",children:"Frontend Components"})})," - How frontend uses these services"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}}}]);