"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[5891],{28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}},65479:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"api-specification/backend_api_docs","title":"Backend API","description":"Overview","source":"@site/docs/api-specification/backend_api_docs.md","sourceDirName":"api-specification","slug":"/api-specification/backend_api_docs","permalink":"/project-001-sketch2screen/docs/api-specification/backend_api_docs","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/api-specification/backend_api_docs.md","tags":[],"version":"current","lastUpdatedBy":"Seunghun Lee","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Function: default()","permalink":"/project-001-sketch2screen/docs/api-specification/FrontendAPI/Navbar/functions/default"},"next":{"title":"System Architecture","permalink":"/project-001-sketch2screen/docs/category/system-architecture"}}');var r=s(74848),t=s(28453);const c={},l="Backend API",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Views Module (<code>views.py</code>)",id:"views-module-viewspy",level:2},{value:"Functions",id:"functions",level:3},{value:"<code>test_api(request)</code>",id:"test_apirequest",level:4},{value:"<code>generate_mockup(request)</code>",id:"generate_mockuprequest",level:4},{value:"<code>frontend(request)</code>",id:"frontendrequest",level:4},{value:"Classes",id:"classes",level:3},{value:"<code>GenerateView</code>",id:"generateview",level:4},{value:"<code>post(self, request)</code>",id:"postself-request",level:5},{value:"Collaboration Server Module (<code>CollabServer.py</code>)",id:"collaboration-server-module-collabserverpy",level:2},{value:"Metaclasses",id:"metaclasses",level:3},{value:"<code>SingletonMeta</code>",id:"singletonmeta",level:4},{value:"<code>__call__(cls, *args, **kwargs)</code>",id:"__call__cls-args-kwargs",level:5},{value:"Classes",id:"classes-1",level:3},{value:"<code>CollabServer</code>",id:"collabserver",level:4},{value:"<code>sendSceneUpdate(userID, sketchID, sketchData)</code>",id:"sendsceneupdateuserid-sketchid-sketchdata",level:5},{value:"<code>sendPageUpdate(userID, sketchID, name)</code>",id:"sendpageupdateuserid-sketchid-name",level:5},{value:"<code>onNewConnection(userID, collabID)</code>",id:"onnewconnectionuserid-collabid",level:5},{value:"<code>onSceneUpdate(userID, collabID, sketchID, sketchData)</code>",id:"onsceneupdateuserid-collabid-sketchid-sketchdata",level:5},{value:"<code>onPageUpdate(userID, collabID, sketchID, name)</code>",id:"onpageupdateuserid-collabid-sketchid-name",level:5},{value:"<code>onConnectionEnd(userID)</code>",id:"onconnectionenduserid",level:5},{value:"Claude Client Service Module (<code>claudeClient.py</code>)",id:"claude-client-service-module-claudeclientpy",level:2},{value:"Functions",id:"functions-1",level:3},{value:"<code>_load_anthropic_key_from_file()</code>",id:"_load_anthropic_key_from_file",level:4},{value:"<code>_client()</code>",id:"_client",level:4},{value:"<code>_extract_text(resp)</code>",id:"_extract_textresp",level:4},{value:"<code>image_to_html_css(image_bytes, media_type, prompt)</code>",id:"image_to_html_cssimage_bytes-media_type-prompt",level:4},{value:"Configuration Constants",id:"configuration-constants",level:3},{value:"<code>MAX_BYTES</code>",id:"max_bytes",level:4},{value:"API Endpoints Summary",id:"api-endpoints-summary",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"backend-api",children:"Backend API"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This document provides comprehensive documentation for the backend API components, including views, services, and collaboration server functionality."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"views-module-viewspy",children:["Views Module (",(0,r.jsx)(n.code,{children:"views.py"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.h4,{id:"test_apirequest",children:(0,r.jsx)(n.code,{children:"test_api(request)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Simple test endpoint to verify frontend-backend connection and ensure the API is responding correctly."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"})," (HttpRequest): Django HTTP request object"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JsonResponse: JSON object containing status, message, and HTTP method","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "Backend is connected!",\n  "method": "GET|POST|etc"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," Returns a successful JSON response regardless of request method"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"generate_mockuprequest",children:(0,r.jsx)(n.code,{children:"generate_mockup(request)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Placeholder endpoint for sketch-to-mockup generation functionality. Currently returns a mock response to confirm button click processing."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"})," (HttpRequest): Django HTTP request object"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JsonResponse: Success response for POST requests with mockup ID","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "Generate button clicked - AI processing would happen here",\n  "mockup_id": "mock_123"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["JsonResponse: Error response for non-POST requests (status 405)","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Method not allowed"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Request method should be POST for successful processing"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Returns mock success response for POST requests"}),"\n",(0,r.jsx)(n.li,{children:"Returns 405 error for other HTTP methods"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None (handled via status codes)"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"frontendrequest",children:(0,r.jsx)(n.code,{children:"frontend(request)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Renders the frontend HTML template for the application."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"})," (HttpRequest): Django HTTP request object"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HttpResponse: Rendered HTML template from 'frontend/src/index.html'"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Template file must exist at 'frontend/src/index.html'"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," Returns rendered HTML page"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"TemplateDoesNotExist"}),": If the template file is not found"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"classes",children:"Classes"}),"\n",(0,r.jsx)(n.h4,{id:"generateview",children:(0,r.jsx)(n.code,{children:"GenerateView"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," API view class that handles image upload and converts sketches to HTML/CSS mockups using Claude AI."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Inheritance:"})," Inherits from ",(0,r.jsx)(n.code,{children:"rest_framework.views.APIView"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Decorators:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'@method_decorator(csrf_exempt, name="dispatch")'}),": Exempts this view from CSRF validation"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Fields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"parser_classes"})," (list): Set to ",(0,r.jsx)(n.code,{children:"[MultiPartParser]"})," to accept multipart/form-data for file uploads"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MAX_BYTES"})," (int, module-level): 10485760 (10MB) - Maximum allowed file upload size"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsx)(n.h5,{id:"postself-request",children:(0,r.jsx)(n.code,{children:"post(self, request)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Handles POST requests containing image file uploads, validates the file, and generates HTML/CSS mockup using Claude AI."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"request"})," (Request): DRF Request object containing uploaded file and optional prompt"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Response: DRF Response object with one of the following:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Success (200): ",(0,r.jsx)(n.code,{children:'{"html": "<generated_html_string>"}'})]}),"\n",(0,r.jsxs)(n.li,{children:["Bad Request (400): ",(0,r.jsx)(n.code,{children:'{"detail": "Missing file field \'file\'."}'})]}),"\n",(0,r.jsxs)(n.li,{children:["Bad Request (400): ",(0,r.jsx)(n.code,{children:'{"detail": "Only images are supported."}'})]}),"\n",(0,r.jsxs)(n.li,{children:["Request Entity Too Large (413): ",(0,r.jsx)(n.code,{children:'{"detail": "File too large."}'})]}),"\n",(0,r.jsxs)(n.li,{children:["Internal Server Error (500): ",(0,r.jsx)(n.code,{children:'{"detail": "Generation failed."}'})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Request must include a file field named "file"'}),"\n",(0,r.jsx)(n.li,{children:'File must be an image (content type starts with "image/")'}),"\n",(0,r.jsx)(n.li,{children:"File size must not exceed 10MB"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"On success: Returns generated HTML/CSS code"}),"\n",(0,r.jsx)(n.li,{children:"On failure: Returns appropriate error message and status code"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Generic ",(0,r.jsx)(n.code,{children:"Exception"}),': Caught and returns 500 error response with message "Generation failed."']}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"collaboration-server-module-collabserverpy",children:["Collaboration Server Module (",(0,r.jsx)(n.code,{children:"CollabServer.py"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"metaclasses",children:"Metaclasses"}),"\n",(0,r.jsx)(n.h4,{id:"singletonmeta",children:(0,r.jsx)(n.code,{children:"SingletonMeta"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Metaclass that implements the Singleton design pattern, ensuring only one instance of a class exists."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Data Fields:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_instance"})," (class variable): Stores the single instance of the class (initially None)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsx)(n.h5,{id:"__call__cls-args-kwargs",children:(0,r.jsx)(n.code,{children:"__call__(cls, *args, **kwargs)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Controls instance creation to ensure singleton behavior."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cls"})," (type): The class being instantiated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"*args"}),": Variable positional arguments"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"**kwargs"}),": Variable keyword arguments"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instance of the class (either existing or newly created)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Returns the existing instance if one exists"}),"\n",(0,r.jsx)(n.li,{children:"Creates and returns a new instance if none exists"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"classes-1",children:"Classes"}),"\n",(0,r.jsx)(n.h4,{id:"collabserver",children:(0,r.jsx)(n.code,{children:"CollabServer"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Singleton server class that manages real-time collaboration by handling scene updates, page updates, and user connections for shared sketches."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Metaclass:"})," ",(0,r.jsx)(n.code,{children:"SingletonMeta"})," (ensures only one instance exists)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data Fields:"})," None (uses singleton pattern, no instance-specific fields defined)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Methods:"})}),"\n",(0,r.jsx)(n.h5,{id:"sendsceneupdateuserid-sketchid-sketchdata",children:(0,r.jsx)(n.code,{children:"sendSceneUpdate(userID, sketchID, sketchData)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Sends a scene update message to a specific user via Django Channels, notifying them of changes to sketch data."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the target user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchID"})," (str): Unique identifier for the sketch being updated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchData"})," (dict/object): The updated sketch scene data"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Django Channels must be properly configured"}),"\n",(0,r.jsx)(n.li,{children:"User channel must exist for the given userID"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"async_to_sync"})," must be imported (currently missing from imports)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Message of type "scene.update" is sent to the user\'s channel'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NameError"}),": ",(0,r.jsx)(n.code,{children:"async_to_sync"})," is not imported"]}),"\n",(0,r.jsx)(n.li,{children:"Channel layer exceptions if user channel doesn't exist"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h5,{id:"sendpageupdateuserid-sketchid-name",children:(0,r.jsx)(n.code,{children:"sendPageUpdate(userID, sketchID, name)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Sends a page update message to a specific user, notifying them of changes to a page/sketch name."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the target user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchID"})," (str): Unique identifier for the sketch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (str): The new/updated name for the page"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Django Channels must be properly configured"}),"\n",(0,r.jsx)(n.li,{children:"User channel must exist for the given userID"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"async_to_sync"})," must be imported (currently missing from imports)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Message of type "page.update" is sent to the user\'s channel'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NameError"}),": ",(0,r.jsx)(n.code,{children:"async_to_sync"})," is not imported"]}),"\n",(0,r.jsx)(n.li,{children:"Channel layer exceptions if user channel doesn't exist"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h5,{id:"onnewconnectionuserid-collabid",children:(0,r.jsx)(n.code,{children:"onNewConnection(userID, collabID)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Handler method to be implemented for processing new user connections to a collaboration session. (Placeholder - implementation pending in STS-26)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the connecting user"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collabID"})," (str): Unique identifier for the collaboration session"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None (currently pass statement)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None defined"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," None (no implementation yet)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h5,{id:"onsceneupdateuserid-collabid-sketchid-sketchdata",children:(0,r.jsx)(n.code,{children:"onSceneUpdate(userID, collabID, sketchID, sketchData)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Handler method to be implemented for processing scene update events from users. (Placeholder - implementation pending in STS-26)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the user making the update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collabID"})," (str): Unique identifier for the collaboration session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchID"})," (str): Unique identifier for the sketch being updated"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchData"})," (dict/object): The updated sketch scene data"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None (currently pass statement)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None defined"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," None (no implementation yet)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h5,{id:"onpageupdateuserid-collabid-sketchid-name",children:(0,r.jsx)(n.code,{children:"onPageUpdate(userID, collabID, sketchID, name)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Handler method to be implemented for processing page/sketch name update events. (Placeholder - implementation pending in STS-26)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the user making the update"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collabID"})," (str): Unique identifier for the collaboration session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"sketchID"})," (str): Unique identifier for the sketch"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"name"})," (str): The new name for the page"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None (currently pass statement)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None defined"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," None (no implementation yet)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h5,{id:"onconnectionenduserid",children:(0,r.jsx)(n.code,{children:"onConnectionEnd(userID)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Handler method to be implemented for processing user disconnection events. (Placeholder - implementation pending in STS-26)"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"userID"})," (str): Unique identifier for the disconnecting user"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Return Value:"})," None (currently pass statement)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pre-conditions:"})," None defined"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," None (no implementation yet)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"claude-client-service-module-claudeclientpy",children:["Claude Client Service Module (",(0,r.jsx)(n.code,{children:"claudeClient.py"}),")"]}),"\n",(0,r.jsx)(n.h3,{id:"functions-1",children:"Functions"}),"\n",(0,r.jsx)(n.h4,{id:"_load_anthropic_key_from_file",children:(0,r.jsx)(n.code,{children:"_load_anthropic_key_from_file()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Internal helper function that reads the Anthropic API key from a plaintext file specified in Django settings."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": The API key string (whitespace trimmed)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CLAUDE_API_KEY"})," setting must be defined in Django settings"]}),"\n",(0,r.jsx)(n.li,{children:"The file path specified in settings must exist and be readable"}),"\n",(0,r.jsx)(n.li,{children:"The file must contain a non-empty API key"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," Returns the API key as a string"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": If ",(0,r.jsx)(n.code,{children:"CLAUDE_API_KEY"})," is not configured in settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": If the API key file is empty"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"}),": If the specified file path doesn't exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"PermissionError"}),": If the file cannot be read due to permissions"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"_client",children:(0,r.jsx)(n.code,{children:"_client()"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Internal helper function that creates and returns an authenticated Anthropic client instance."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters:"})," None"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Anthropic"}),": Authenticated Anthropic API client instance"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["API key must be available via ",(0,r.jsx)(n.code,{children:"_load_anthropic_key_from_file()"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," Returns configured Anthropic client"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": Propagated from ",(0,r.jsx)(n.code,{children:"_load_anthropic_key_from_file()"})," if API key is not configured"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"}),": Propagated if API key file doesn't exist"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"_extract_textresp",children:(0,r.jsx)(n.code,{children:"_extract_text(resp)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Internal helper function that extracts and concatenates all text blocks from a Claude API response object."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"resp"})," (Message): Anthropic API response object containing content blocks"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": Concatenated text from all text-type content blocks (whitespace trimmed)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Response object must have a ",(0,r.jsx)(n.code,{children:"content"})," attribute (list of content blocks)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Post-conditions:"})," Returns extracted text string (may be empty if no text blocks found)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})," None (handles missing attributes gracefully)"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"image_to_html_cssimage_bytes-media_type-prompt",children:(0,r.jsx)(n.code,{children:"image_to_html_css(image_bytes, media_type, prompt)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Main service function that sends an image (with optional text prompt) to Claude AI and receives generated HTML/CSS code that recreates the UI design from the image."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"image_bytes"})," (bytes): Raw binary data of the image file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"media_type"}),' (str, optional): MIME type of the image (default: "image/png")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prompt"})," (Optional[str], optional): Custom user instruction for code generation (default: None)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Return Value:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"str"}),": Generated HTML and CSS code as a string"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pre-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Valid image bytes must be provided"}),"\n",(0,r.jsx)(n.li,{children:"Anthropic API key must be configured"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"CLAUDE_MODEL"}),' setting should be defined in Django settings (defaults to "claude-sonnet-4-20250514")']}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Post-conditions:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Returns production-ready HTML/CSS code"}),"\n",(0,r.jsx)(n.li,{children:"Image is base64 encoded before sending to API"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"System Prompt Context:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Instructs Claude to be a frontend assistant"}),"\n",(0,r.jsx)(n.li,{children:"Requests high-fidelity, production-ready HTML and CSS"}),"\n",(0,r.jsx)(n.li,{children:"Specifies semantic HTML, minimal wrappers, inline styles"}),"\n",(0,r.jsx)(n.li,{children:"Allows Bootstrap or Tailwind CSS"}),"\n",(0,r.jsx)(n.li,{children:"Prohibits body tags and markdown fences"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Default User Instruction:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Generate HTML/CSS recreating the layout"}),"\n",(0,r.jsx)(n.li,{children:"Use labeled HTML tags from the image"}),"\n",(0,r.jsx)(n.li,{children:"Include text content from the image"}),"\n",(0,r.jsx)(n.li,{children:"Use placeholders for icons/images"}),"\n",(0,r.jsx)(n.li,{children:"Provide only code without markdown fences"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Exceptions Thrown:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": If Claude returns no text content"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"RuntimeError"}),": Propagated if API key is not configured"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"FileNotFoundError"}),": Propagated if API key file doesn't exist"]}),"\n",(0,r.jsx)(n.li,{children:"API exceptions from Anthropic SDK (network errors, rate limits, etc.)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"configuration-constants",children:"Configuration Constants"}),"\n",(0,r.jsx)(n.h4,{id:"max_bytes",children:(0,r.jsx)(n.code,{children:"MAX_BYTES"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Module:"})," ",(0,r.jsx)(n.code,{children:"views.py"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Value:"})," 10485760 (10MB)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose:"})," Maximum allowed file size for image uploads"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type:"})," ",(0,r.jsx)(n.code,{children:"int"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"api-endpoints-summary",children:"API Endpoints Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Purpose"}),(0,r.jsx)(n.th,{children:"Authentication"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/api/test/"})}),(0,r.jsx)(n.td,{children:"Any"}),(0,r.jsx)(n.td,{children:"Test backend connectivity"}),(0,r.jsx)(n.td,{children:"None (CSRF exempt)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/api/generate-mockup/"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Placeholder for mockup generation"}),(0,r.jsx)(n.td,{children:"None (CSRF exempt)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/api/generate/"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Generate HTML/CSS from image"}),(0,r.jsx)(n.td,{children:"None (CSRF exempt)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"/"})," (frontend)"]}),(0,r.jsx)(n.td,{children:"GET"}),(0,r.jsx)(n.td,{children:"Serve frontend application"}),(0,r.jsx)(n.td,{children:"Standard"})]})]})]}),"\n",(0,r.jsx)(n.hr,{})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);