"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6888],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>l});var r=s(96540);const i={},t=r.createContext(i);function d(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),r.createElement(t.Provider,{value:n},e.children)}},77537:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api-specification/backend-api/rest-endpoints","title":"REST API Endpoints","description":"Complete reference for all HTTP REST API endpoints in Sketch2Screen.","source":"@site/docs/api-specification/backend-api/rest-endpoints.md","sourceDirName":"api-specification/backend-api","slug":"/api-specification/backend-api/rest-endpoints","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/rest-endpoints","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/api-specification/backend-api/rest-endpoints.md","tags":[],"version":"current","lastUpdatedBy":"Seunghun Lee","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Backend API","permalink":"/project-001-sketch2screen/docs/category/backend-api"},"next":{"title":"Internal Services","permalink":"/project-001-sketch2screen/docs/api-specification/backend-api/services"}}');var i=s(74848),t=s(28453);const d={},l="REST API Endpoints",c={},a=[{value:"Base URL",id:"base-url",level:2},{value:"Endpoint Summary",id:"endpoint-summary",level:2},{value:"Endpoints",id:"endpoints",level:2},{value:"GET/POST <code>/api/</code>",id:"getpost-api",level:3},{value:"POST <code>/api/generate/</code>",id:"post-apigenerate",level:3},{value:"POST <code>/api/generate-multi/</code>",id:"post-apigenerate-multi",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Progress Tracking for Multi-page",id:"progress-tracking-for-multi-page",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Related Documentation",id:"related-documentation",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rest-api-endpoints",children:"REST API Endpoints"})}),"\n",(0,i.jsx)(n.p,{children:"Complete reference for all HTTP REST API endpoints in Sketch2Screen."}),"\n",(0,i.jsx)(n.h2,{id:"base-url",children:"Base URL"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"http://localhost:8000/api/\n"})}),"\n",(0,i.jsx)(n.p,{children:"In production, replace with your deployed backend URL."}),"\n",(0,i.jsx)(n.h2,{id:"endpoint-summary",children:"Endpoint Summary"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Endpoint"}),(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Purpose"}),(0,i.jsx)(n.th,{children:"Request Type"}),(0,i.jsx)(n.th,{children:"Response Type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/api/"})}),(0,i.jsx)(n.td,{children:"GET/POST/Any"}),(0,i.jsx)(n.td,{children:"Health check & connectivity test"}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"JSON"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/api/generate/"})}),(0,i.jsx)(n.td,{children:"POST"}),(0,i.jsx)(n.td,{children:"Generate HTML/CSS from single image"}),(0,i.jsx)(n.td,{children:"multipart/form-data"}),(0,i.jsx)(n.td,{children:"JSON"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"/api/generate-multi/"})}),(0,i.jsx)(n.td,{children:"POST"}),(0,i.jsx)(n.td,{children:"Generate HTML/CSS from multiple images"}),(0,i.jsx)(n.td,{children:"multipart/form-data"}),(0,i.jsx)(n.td,{children:"JSON"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"endpoints",children:"Endpoints"}),"\n",(0,i.jsxs)(n.h3,{id:"getpost-api",children:["GET/POST ",(0,i.jsx)(n.code,{children:"/api/"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Health check endpoint to verify frontend-backend connectivity."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Authentication:"})," None required"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Request:"})," No parameters required"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "Backend is connected!",\n  "method": "GET"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"status"}),' (string) - Always "success"']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"message"})," (string) - Connection confirmation message"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"method"})," (string) - HTTP method used (GET, POST, etc.)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Status Codes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"200 OK"})," - Always returns success"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"// Test backend connection\nconst response = await fetch('/api/');\nconst data = await response.json();\nconsole.log(data.message); // \"Backend is connected!\"\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"cURL Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:8000/api/\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"post-apigenerate",children:["POST ",(0,i.jsx)(n.code,{children:"/api/generate/"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Generate HTML/CSS mockup from a single sketch image using Claude AI."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Authentication:"})," None required"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Content-Type:"})," ",(0,i.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Parameters:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"file"})}),(0,i.jsx)(n.td,{children:"File"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Image file (PNG, JPG, etc.) of the sketch"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"prompt"})}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:"Custom instruction for code generation"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"File Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Maximum size: 10MB (10,485,760 bytes)"}),"\n",(0,i.jsxs)(n.li,{children:["Allowed types: Any image MIME type (",(0,i.jsx)(n.code,{children:"image/png"}),", ",(0,i.jsx)(n.code,{children:"image/jpeg"}),", etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:["Field name must be exactly ",(0,i.jsx)(n.code,{children:"file"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const blob = await drawingCanvas.exportToBlob();\nconst formData = new FormData();\nformData.append('file', blob, 'sketch.png');\n\n// Optional: Add custom prompt\nformData.append('prompt', 'Make this design responsive and modern');\n\nconst response = await fetch('/api/generate/', {\n  method: 'POST',\n  body: formData\n});\n\nconst data = await response.json();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Response (200 OK):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "html": "<div class=\\"container\\">...</div>"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"html"})," (string) - Generated HTML and CSS code as a single string"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Responses:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - Missing File:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Missing file field \'file\'."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - Invalid File Type:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Only images are supported."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"413 Request Entity Too Large:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "File too large."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"500 Internal Server Error:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Generation failed."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"cURL Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/api/generate/ \\\n  -F "file=@sketch.png" \\\n  -F "prompt=Create a modern responsive design"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Notes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The generated HTML includes inline styles"}),"\n",(0,i.jsxs)(n.li,{children:["No ",(0,i.jsx)(n.code,{children:"<body>"})," tags are included (inject into existing page)"]}),"\n",(0,i.jsx)(n.li,{children:"Bootstrap or Tailwind CSS may be used in the output"}),"\n",(0,i.jsx)(n.li,{children:"Generation time varies (typically 3-10 seconds)"}),"\n",(0,i.jsxs)(n.li,{children:["Uses Claude model: ",(0,i.jsx)(n.code,{children:"claude-sonnet-4-20250514"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"post-apigenerate-multi",children:["POST ",(0,i.jsx)(n.code,{children:"/api/generate-multi/"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Generate HTML/CSS mockups from multiple sketch images in a single batch request."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Authentication:"})," None required"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Content-Type:"})," ",(0,i.jsx)(n.code,{children:"multipart/form-data"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Parameters:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Required"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"count"})}),(0,i.jsx)(n.td,{children:"String (number)"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Number of files being uploaded (1-20)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"file_0"}),", ",(0,i.jsx)(n.code,{children:"file_1"}),", ..."]}),(0,i.jsx)(n.td,{children:"File"}),(0,i.jsx)(n.td,{children:"Yes"}),(0,i.jsx)(n.td,{children:"Image files, numbered sequentially from 0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"name_0"}),", ",(0,i.jsx)(n.code,{children:"name_1"}),", ..."]}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:'Display names for each page (default: "Page N")'})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"id_0"}),", ",(0,i.jsx)(n.code,{children:"id_1"}),", ..."]}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"No"}),(0,i.jsx)(n.td,{children:'Page IDs for matching results (default: "page_N")'})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Minimum count: 1"}),"\n",(0,i.jsx)(n.li,{children:"Maximum count: 20"}),"\n",(0,i.jsx)(n.li,{children:"Each file: Maximum 10MB, must be an image"}),"\n",(0,i.jsxs)(n.li,{children:["File field names must be exactly ",(0,i.jsx)(n.code,{children:"file_0"}),", ",(0,i.jsx)(n.code,{children:"file_1"}),", etc."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Request Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"const formData = new FormData();\nformData.append('count', '3'); // Uploading 3 pages\n\n// Add files with corresponding metadata\npages.forEach((page, index) => {\n  const blob = await exportPageToBlob(page);\n  formData.append(`file_${index}`, blob, `${page.name}.png`);\n  formData.append(`name_${index}`, page.name);\n  formData.append(`id_${index}`, page.id);\n});\n\nconst response = await fetch('/api/generate-multi/', {\n  method: 'POST',\n  body: formData\n});\n\nconst data = await response.json();\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Response (200 OK):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "results": [\n    {\n      "id": "page-1",\n      "html": "<div class=\\"homepage\\">...</div>"\n    },\n    {\n      "id": "page-2",\n      "html": "<div class=\\"about\\">...</div>"\n    },\n    {\n      "id": "page-3",\n      "html": "<div class=\\"contact\\">...</div>"\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Response Fields:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"results"})," (array) - Array of result objects","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"id"})," (string) - Page ID matching the request"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"html"})," (string) - Generated HTML/CSS code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"error"})," (string, optional) - Error message if generation failed for this page"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Partial Success Response:"})}),"\n",(0,i.jsx)(n.p,{children:"If some files fail but others succeed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "results": [\n    {\n      "id": "page-1",\n      "html": "<div>...</div>"\n    },\n    {\n      "id": "page-2",\n      "html": "<p>Error: File too large.</p>",\n      "error": "File too large."\n    },\n    {\n      "id": "page-3",\n      "html": "<p>Error generating mockup for About: API timeout</p>",\n      "error": "Generation failed."\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Error Responses:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - Missing Count:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Missing \'count\' field."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - Invalid Count:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Invalid count value"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - Count Out of Range:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "Count must be between 1 and 20"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"400 Bad Request - No Valid Files:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "detail": "No valid files provided."\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"cURL Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/api/generate-multi/ \\\n  -F "count=2" \\\n  -F "file_0=@home.png" \\\n  -F "name_0=Homepage" \\\n  -F "id_0=page-home" \\\n  -F "file_1=@about.png" \\\n  -F "name_1=About Us" \\\n  -F "id_1=page-about"\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Behavior Notes:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Files are processed ",(0,i.jsx)(n.strong,{children:"sequentially"})," (not in parallel)"]}),"\n",(0,i.jsxs)(n.li,{children:["Missing files are skipped (no error if ",(0,i.jsx)(n.code,{children:"file_3"})," is missing)"]}),"\n",(0,i.jsx)(n.li,{children:"Invalid files return an error object but don't fail the entire request"}),"\n",(0,i.jsx)(n.li,{children:"Each file is validated independently"}),"\n",(0,i.jsx)(n.li,{children:"Generation time scales linearly with file count (3-10 seconds per image)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance Tips:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Limit batch sizes to 5-10 images for faster response times"}),"\n",(0,i.jsx)(n.li,{children:"Use single generation endpoint for real-time feedback"}),"\n",(0,i.jsx)(n.li,{children:"Consider client-side parallelization for many pages"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function generateMockup(blob) {\n  try {\n    const formData = new FormData();\n    formData.append('file', blob, 'sketch.png');\n\n    const response = await fetch('/api/generate/', {\n      method: 'POST',\n      body: formData\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.detail || 'Generation failed');\n    }\n\n    const { html } = await response.json();\n    return html;\n\n  } catch (error) {\n    console.error('Mockup generation error:', error);\n    throw error;\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"progress-tracking-for-multi-page",children:"Progress Tracking for Multi-page"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function generateMultiplePages(pages) {\n  const formData = new FormData();\n  formData.append('count', pages.length.toString());\n\n  pages.forEach((page, index) => {\n    formData.append(`file_${index}`, page.blob);\n    formData.append(`id_${index}`, page.id);\n  });\n\n  // Show loading state\n  setLoading(true);\n  setProgress(0);\n\n  try {\n    const response = await fetch('/api/generate-multi/', {\n      method: 'POST',\n      body: formData\n    });\n\n    const { results } = await response.json();\n\n    // Process results\n    results.forEach((result, index) => {\n      if (result.error) {\n        console.error(`Failed to generate ${pages[index].name}:`, result.error);\n      } else {\n        console.log(`Generated ${pages[index].name}`);\n      }\n      setProgress(((index + 1) / results.length) * 100);\n    });\n\n    return results;\n\n  } finally {\n    setLoading(false);\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"async function generateWithRetry(blob, maxRetries = 3) {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const formData = new FormData();\n      formData.append('file', blob, 'sketch.png');\n\n      const response = await fetch('/api/generate/', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (response.ok) {\n        return await response.json();\n      }\n\n      // Don't retry on client errors (4xx)\n      if (response.status >= 400 && response.status < 500) {\n        throw new Error(await response.json().then(d => d.detail));\n      }\n\n      // Retry on server errors (5xx)\n      if (attempt < maxRetries) {\n        await new Promise(resolve => setTimeout(resolve, 1000 * attempt));\n        continue;\n      }\n\n    } catch (error) {\n      if (attempt === maxRetries) throw error;\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/websocket-api",children:"WebSocket API"})})," - Real-time collaboration protocol"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/backend-api/services",children:"Internal Services"})})," - Claude Client implementation details"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/project-001-sketch2screen/docs/api-specification/frontend-api/components",children:"Frontend Components"})})," - React components that use these endpoints"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);