"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[6244],{28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var r=n(96540);const s={},i=r.createContext(s);function d(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),r.createElement(i.Provider,{value:t},e.children)}},98202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"testing/unit-testing","title":"Unit Tests","description":"Frontend","source":"@site/docs/testing/unit-testing.md","sourceDirName":"testing","slug":"/testing/unit-testing","permalink":"/project-001-sketch2screen/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Fall/project-001-sketch2screen/edit/main/documentation/docs/testing/unit-testing.md","tags":[],"version":"current","lastUpdatedBy":"Chung Ying Lee","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Test Procedures","permalink":"/project-001-sketch2screen/docs/category/test-procedures"},"next":{"title":"Integration Tests","permalink":"/project-001-sketch2screen/docs/testing/integration-testing"}}');var s=n(74848),i=n(28453);const d={sidebar_position:1},c="Unit Tests",l={},h=[{value:"Frontend",id:"frontend",level:2},{value:"App",id:"app",level:3},{value:"Collector",id:"collector",level:3},{value:"Backend",id:"backend",level:2},{value:"Mockup Generation API:",id:"mockup-generation-api",level:3},{value:"Frontend View:",id:"frontend-view",level:3},{value:"Generate View:",id:"generate-view",level:3}];function o(e){const t={h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"unit-tests",children:"Unit Tests"})}),"\n",(0,s.jsx)(t.h2,{id:"frontend",children:"Frontend"}),"\n",(0,s.jsx)(t.p,{children:"All frontend testing will be done with vitest.\nVitest was chosen as it is designed to work with our chosen dev framework, vite."}),"\n",(0,s.jsx)(t.p,{children:"Due to the nature of react, only non-react functions, such as helper functions, will be subject to unit tests.\nComponents will be tested through integration tests instead."}),"\n",(0,s.jsx)(t.h3,{id:"app",children:"App"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Function"}),(0,s.jsx)(t.th,{children:"Goal"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"makeEmptyScene()"}),(0,s.jsx)(t.td,{children:"returns a valid, empty SceneData object"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"makeNewSketchPage(index)"}),(0,s.jsx)(t.td,{children:"returns valid SketchPage object with the given index"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"collector",children:"Collector"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Function"}),(0,s.jsx)(t.th,{children:"Goal"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Collector(string)"}),(0,s.jsx)(t.td,{children:"given a sample html string, returns array of parsed elements"})]})})]}),"\n",(0,s.jsx)(t.h2,{id:"backend",children:"Backend"}),"\n",(0,s.jsx)(t.p,{children:"All backend testing will be done with pytest. Mock django objects will be used for anything not being directly tested."}),"\n",(0,s.jsx)(t.h3,{id:"mockup-generation-api",children:"Mockup Generation API:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Goal"}),(0,s.jsx)(t.th,{children:"Input"}),(0,s.jsx)(t.th,{children:"Output"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"POST returns success"}),(0,s.jsx)(t.td,{children:"Blank POST request"}),(0,s.jsx)(t.td,{children:"Success response"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"POST returns mockup id"}),(0,s.jsx)(t.td,{children:"Blank POST request"}),(0,s.jsx)(t.td,{children:"Mockup ID of response"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GET returns error"}),(0,s.jsx)(t.td,{children:"Blank GET request"}),(0,s.jsx)(t.td,{children:"HTTP 405"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PUT returns error"}),(0,s.jsx)(t.td,{children:"Blank PUT request"}),(0,s.jsx)(t.td,{children:"HTTP 405"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"frontend-view",children:"Frontend View:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Goal"}),(0,s.jsx)(t.th,{children:"Input"}),(0,s.jsx)(t.th,{children:"Output"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Renders appropriate template"}),(0,s.jsx)(t.td,{children:'GET "/"'}),(0,s.jsx)(t.td,{children:'registered render of "frontend/src/index.html"'})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Accepts GET requests"}),(0,s.jsx)(t.td,{children:'GET "/"'}),(0,s.jsx)(t.td,{children:"registered access of render function"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Returns result from render"}),(0,s.jsx)(t.td,{children:'GET "/"'}),(0,s.jsx)(t.td,{children:"response matching preset test response"})]})]})]}),"\n",(0,s.jsx)(t.h3,{id:"generate-view",children:"Generate View:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Goal"}),(0,s.jsx)(t.th,{children:"Input"}),(0,s.jsx)(t.th,{children:"Output"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Error on missing file"}),(0,s.jsx)(t.td,{children:"POST with no file"}),(0,s.jsx)(t.td,{children:"HTTP 400"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Error on massive file"}),(0,s.jsx)(t.td,{children:"POST with file > 10MB"}),(0,s.jsx)(t.td,{children:"HTTP 413"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Error on incorrect file type"}),(0,s.jsx)(t.td,{children:"POST with text file"}),(0,s.jsx)(t.td,{children:"HTTP 400"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Successful generation"}),(0,s.jsx)(t.td,{children:"POST with PNG"}),(0,s.jsx)(t.td,{children:"HTTP 200 + generated html in response"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Prompt parameter processed"}),(0,s.jsx)(t.td,{children:"POST with PNG and prompt"}),(0,s.jsx)(t.td,{children:"Mock LLM API registers additional prompt"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"File conversion errors handled"}),(0,s.jsx)(t.td,{children:"POST with PNG and simulated error"}),(0,s.jsx)(t.td,{children:"HTTP 500"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"Accepts different file types"}),(0,s.jsx)(t.td,{children:"POST with JPG"}),(0,s.jsx)(t.td,{children:"HTTP 200"})]})]})]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);